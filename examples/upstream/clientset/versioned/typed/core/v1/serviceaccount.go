/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/kcp-dev/logicalcluster/v3"
	authenticationv1 "k8s.io/api/authentication/v1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	corev1client "k8s.io/client-go/kuberentes/typed/core/v1"
	applyconfigurationcorev1 "k8s.io/code-generator/examples/upstream/applyconfiguration/core/v1"
	scheme "k8s.io/code-generator/examples/upstream/clientset/versioned/scheme"
)

// ServiceAccountsClusterGetter has a method to return a ServiceAccountClusterInterface.
// A group's client should implement this interface.
type ServiceAccountsClusterGetter interface {
	ServiceAccounts(namespace string) ServiceAccountClusterInterface
}

// ServiceAccountInterface has methods to work with ServiceAccount resources.
type ServiceAccountClusterInterface interface {
	Cluster(logicalcluster.Path) corev1client.ServiceAccountInterface

	List(ctx context.Context, opts v1.ListOptions) (*corev1.ServiceAccountList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)

	ServiceAccountExpansion
}

// serviceAccounts implements ServiceAccountInterface
type serviceAccounts struct {
	*gentype.ClientWithListAndApply[*corev1.ServiceAccount, *corev1.ServiceAccountList, *applyconfigurationcorev1.ServiceAccountApplyConfiguration]
}

// newServiceAccounts returns a ServiceAccounts
func newServiceAccounts(c *CoreV1Client, namespace string) *serviceAccounts {
	return &serviceAccounts{
		gentype.NewClientWithListAndApply[*corev1.ServiceAccount, *corev1.ServiceAccountList, *applyconfigurationcorev1.ServiceAccountApplyConfiguration](
			"serviceaccounts",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *corev1.ServiceAccount { return &corev1.ServiceAccount{} },
			func() *corev1.ServiceAccountList { return &corev1.ServiceAccountList{} }),
	}
}

// CreateToken takes the representation of a tokenRequest and creates it.  Returns the server's representation of the tokenRequest, and an error, if there is any.
func (c *serviceAccounts) CreateToken(ctx context.Context, serviceAccountName string, tokenRequest *authenticationv1.TokenRequest, opts v1.CreateOptions) (result *authenticationv1.TokenRequest, err error) {
	result = &authenticationv1.TokenRequest{}
	err = c.GetClient().Post().
		Namespace(c.GetNamespace()).
		Resource("serviceaccounts").
		Name(serviceAccountName).
		SubResource("token").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(tokenRequest).
		Do(ctx).
		Into(result)
	return
}
