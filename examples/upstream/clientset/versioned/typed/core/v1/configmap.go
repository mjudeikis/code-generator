/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/kcp-dev/logicalcluster/v3"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	corev1client "k8s.io/client-go/kuberentes/typed/core/v1"
	applyconfigurationcorev1 "k8s.io/code-generator/examples/upstream/applyconfiguration/core/v1"
	scheme "k8s.io/code-generator/examples/upstream/clientset/versioned/scheme"
)

// ConfigMapsClusterGetter has a method to return a ConfigMapClusterInterface.
// A group's client should implement this interface.
type ConfigMapsClusterGetter interface {
	ConfigMaps(namespace string) ConfigMapClusterInterface
}

// ConfigMapInterface has methods to work with ConfigMap resources.
type ConfigMapClusterInterface interface {
	Cluster(logicalcluster.Path) corev1client.ConfigMapInterface

	List(ctx context.Context, opts v1.ListOptions) (*corev1.ConfigMapList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	ConfigMapExpansion
}

// configMaps implements ConfigMapInterface
type configMaps struct {
	*gentype.ClientWithListAndApply[*corev1.ConfigMap, *corev1.ConfigMapList, *applyconfigurationcorev1.ConfigMapApplyConfiguration]
}

// newConfigMaps returns a ConfigMaps
func newConfigMaps(c *CoreV1Client, namespace string) *configMaps {
	return &configMaps{
		gentype.NewClientWithListAndApply[*corev1.ConfigMap, *corev1.ConfigMapList, *applyconfigurationcorev1.ConfigMapApplyConfiguration](
			"configmaps",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *corev1.ConfigMap { return &corev1.ConfigMap{} },
			func() *corev1.ConfigMapList { return &corev1.ConfigMapList{} }),
	}
}
