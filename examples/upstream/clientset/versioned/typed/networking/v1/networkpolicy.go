/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/kcp-dev/logicalcluster/v3"
	networkingv1 "k8s.io/api/networking/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	networkingv1client "k8s.io/client-go/kuberentes/typed/networking/v1"
	applyconfigurationnetworkingv1 "k8s.io/code-generator/examples/upstream/applyconfiguration/networking/v1"
	scheme "k8s.io/code-generator/examples/upstream/clientset/versioned/scheme"
)

// NetworkPoliciesClusterGetter has a method to return a NetworkPolicyClusterInterface.
// A group's client should implement this interface.
type NetworkPoliciesClusterGetter interface {
	NetworkPolicies(namespace string) NetworkPolicyClusterInterface
}

// NetworkPolicyInterface has methods to work with NetworkPolicy resources.
type NetworkPolicyClusterInterface interface {
	Cluster(logicalcluster.Path) networkingv1client.NetworkPolicyInterface

	List(ctx context.Context, opts v1.ListOptions) (*networkingv1.NetworkPolicyList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	NetworkPolicyExpansion
}

// networkPolicies implements NetworkPolicyInterface
type networkPolicies struct {
	*gentype.ClientWithListAndApply[*networkingv1.NetworkPolicy, *networkingv1.NetworkPolicyList, *applyconfigurationnetworkingv1.NetworkPolicyApplyConfiguration]
}

// newNetworkPolicies returns a NetworkPolicies
func newNetworkPolicies(c *NetworkingV1Client, namespace string) *networkPolicies {
	return &networkPolicies{
		gentype.NewClientWithListAndApply[*networkingv1.NetworkPolicy, *networkingv1.NetworkPolicyList, *applyconfigurationnetworkingv1.NetworkPolicyApplyConfiguration](
			"networkpolicies",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *networkingv1.NetworkPolicy { return &networkingv1.NetworkPolicy{} },
			func() *networkingv1.NetworkPolicyList { return &networkingv1.NetworkPolicyList{} }),
	}
}
