/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha3

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"
	v1alpha3 "k8s.io/api/resource/v1alpha3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodSchedulingContextLister helps list PodSchedulingContexts.
// All objects returned here must be treated as read-only.
type PodSchedulingContextLister interface {
	// List lists all PodSchedulingContexts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha3.PodSchedulingContext, err error)
	// PodSchedulingContexts returns an object that can list and get PodSchedulingContexts.
	PodSchedulingContexts(namespace string) PodSchedulingContextNamespaceLister
	PodSchedulingContextListerExpansion
}

// PodSchedulingContextClusterLister helps list PodSchedulingContexts.
// All objects returned here must be treated as read-only.
type PodSchedulingContextClusterLister interface {
	// List lists all PodSchedulingContexts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha3.PodSchedulingContext, err error)
	PodSchedulingContextClusterListerExpansion
}

// podSchedulingContextLister implements the PodSchedulingContextLister interface.
type podSchedulingContextLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// podSchedulingContextLister implements the PodSchedulingContextClusterLister interface.
type podSchedulingContextClusterLister struct {
	indexer cache.Indexer
}

// Cluster scopes the lister to one workspace, allowing users to list and get PodSchedulingContext.
func (s *podSchedulingContextClusterLister) Cluster(clusterName logicalcluster.Name) PodSchedulingContextLister {
	return &podSchedulingContextLister{indexer: s.indexer, clusterName: clusterName}
}

// List lists all PodSchedulingContexts in the indexer.
func (s *podSchedulingContextLister) List(selector labels.Selector) (ret []*v1alpha3.PodSchedulingContext, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*v1alpha3.PodSchedulingContext))
	})
	return ret, err
}

// List lists all PodSchedulingContexts in the indexer.
func (s *podSchedulingContextClusterLister) List(selector labels.Selector) (ret []*v1alpha3.PodSchedulingContext, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.PodSchedulingContext))
	})
	return ret, err
}

// NewPodSchedulingContextClusterLister returns a new PodSchedulingContextClusterLister.
func NewPodSchedulingContextClusterLister(indexer cache.Indexer) PodSchedulingContextClusterLister {
	return &podSchedulingContextClusterLister{
		indexer: indexer,
	}
}

// PodSchedulingContexts returns an object that can list and get PodSchedulingContexts.
func (s *podSchedulingContextLister) PodSchedulingContexts(namespace string) PodSchedulingContextNamespaceLister {
	return podSchedulingContextNamespaceLister{
		indexer:     s.indexer,
		clusterName: s.clusterName,
		namespace:   namespace,
	}
}

// PodSchedulingContextNamespaceLister helps list and get PodSchedulingContexts.
// All objects returned here must be treated as read-only.
type PodSchedulingContextNamespaceLister interface {
	// List lists all PodSchedulingContexts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha3.PodSchedulingContext, err error)
	// Get retrieves the PodSchedulingContext from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha3.PodSchedulingContext, error)
	PodSchedulingContextNamespaceListerExpansion
}

// podSchedulingContextNamespaceLister implements the PodSchedulingContextNamespaceLister
// interface.
type podSchedulingContextNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// Get retrieves the PodSchedulingContext from the index for a given name.
func (s podSchedulingContextNamespaceLister) Get(name string) (*v1alpha3.PodSchedulingContext, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha3.Resource("podschedulingcontext"), name)
	}
	return obj.(*v1alpha3.PodSchedulingContext), nil
}

// Get retrieves the PodSchedulingContext from the index for a given name.
func (s podSchedulingContextNamespaceLister) List(selector labels.Selector) (ret []*v1alpha3.PodSchedulingContext, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*v1alpha3.PodSchedulingContext))
	})
	return ret, err
}
