/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LimitRangeLister helps list LimitRanges.
// All objects returned here must be treated as read-only.
type LimitRangeLister interface {
	// List lists all LimitRanges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LimitRange, err error)
	// LimitRanges returns an object that can list and get LimitRanges.
	LimitRanges(namespace string) LimitRangeNamespaceLister
	LimitRangeListerExpansion
}

// LimitRangeClusterLister helps list LimitRanges.
// All objects returned here must be treated as read-only.
type LimitRangeClusterLister interface {
	// List lists all LimitRanges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LimitRange, err error)
	LimitRangeClusterListerExpansion
}

// limitRangeLister implements the LimitRangeLister interface.
type limitRangeLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// limitRangeLister implements the LimitRangeClusterLister interface.
type limitRangeClusterLister struct {
	indexer cache.Indexer
}

// Cluster scopes the lister to one workspace, allowing users to list and get LimitRange.
func (s *limitRangeClusterLister) Cluster(clusterName logicalcluster.Name) LimitRangeLister {
	return &limitRangeLister{indexer: s.indexer, clusterName: clusterName}
}

// List lists all LimitRanges in the indexer.
func (s *limitRangeLister) List(selector labels.Selector) (ret []*v1.LimitRange, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*v1.LimitRange))
	})
	return ret, err
}

// List lists all LimitRanges in the indexer.
func (s *limitRangeClusterLister) List(selector labels.Selector) (ret []*v1.LimitRange, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LimitRange))
	})
	return ret, err
}

// NewLimitRangeClusterLister returns a new LimitRangeClusterLister.
func NewLimitRangeClusterLister(indexer cache.Indexer) LimitRangeClusterLister {
	return &limitRangeClusterLister{
		indexer: indexer,
	}
}

// LimitRanges returns an object that can list and get LimitRanges.
func (s *limitRangeLister) LimitRanges(namespace string) LimitRangeNamespaceLister {
	return limitRangeNamespaceLister{
		indexer:     s.indexer,
		clusterName: s.clusterName,
		namespace:   namespace,
	}
}

// LimitRangeNamespaceLister helps list and get LimitRanges.
// All objects returned here must be treated as read-only.
type LimitRangeNamespaceLister interface {
	// List lists all LimitRanges in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LimitRange, err error)
	// Get retrieves the LimitRange from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.LimitRange, error)
	LimitRangeNamespaceListerExpansion
}

// limitRangeNamespaceLister implements the LimitRangeNamespaceLister
// interface.
type limitRangeNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// Get retrieves the LimitRange from the index for a given name.
func (s limitRangeNamespaceLister) Get(name string) (*v1.LimitRange, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("limitrange"), name)
	}
	return obj.(*v1.LimitRange), nil
}

// Get retrieves the LimitRange from the index for a given name.
func (s limitRangeNamespaceLister) List(selector labels.Selector) (ret []*v1.LimitRange, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*v1.LimitRange))
	})
	return ret, err
}
