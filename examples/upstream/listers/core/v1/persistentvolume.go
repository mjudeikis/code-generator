/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PersistentVolumeLister helps list PersistentVolumes.
// All objects returned here must be treated as read-only.
type PersistentVolumeLister interface {
	// List lists all PersistentVolumes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PersistentVolume, err error)
	// Get retrieves the PersistentVolume from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PersistentVolume, error)
	PersistentVolumeListerExpansion
}

// PersistentVolumeClusterLister helps list PersistentVolumes.
// All objects returned here must be treated as read-only.
type PersistentVolumeClusterLister interface {
	// List lists all PersistentVolumes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PersistentVolume, err error)
	PersistentVolumeClusterListerExpansion
}

// persistentVolumeLister implements the PersistentVolumeLister interface.
type persistentVolumeLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// persistentVolumeLister implements the PersistentVolumeClusterLister interface.
type persistentVolumeClusterLister struct {
	indexer cache.Indexer
}

// Cluster scopes the lister to one workspace, allowing users to list and get PersistentVolume.
func (s *persistentVolumeClusterLister) Cluster(clusterName logicalcluster.Name) PersistentVolumeLister {
	return &persistentVolumeLister{indexer: s.indexer, clusterName: clusterName}
}

// List lists all PersistentVolumes in the indexer.
func (s *persistentVolumeLister) List(selector labels.Selector) (ret []*v1.PersistentVolume, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*v1.PersistentVolume))
	})
	return ret, err
}

// List lists all PersistentVolumes in the indexer.
func (s *persistentVolumeClusterLister) List(selector labels.Selector) (ret []*v1.PersistentVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PersistentVolume))
	})
	return ret, err
}

// NewPersistentVolumeClusterLister returns a new PersistentVolumeClusterLister.
func NewPersistentVolumeClusterLister(indexer cache.Indexer) PersistentVolumeClusterLister {
	return &persistentVolumeClusterLister{
		indexer: indexer,
	}
}

// Get retrieves the PersistentVolume from the index for a given name.
func (s persistentVolumeLister) Get(name string) (*v1.PersistentVolume, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("persistentvolume"), name)
	}
	return obj.(*v1.PersistentVolume), nil
}
