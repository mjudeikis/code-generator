/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointsLister helps list Endpointses.
// All objects returned here must be treated as read-only.
type EndpointsLister interface {
	// List lists all Endpointses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Endpoints, err error)
	// Endpointses returns an object that can list and get Endpointses.
	Endpointses(namespace string) EndpointsNamespaceLister
	EndpointsListerExpansion
}

// EndpointsClusterLister helps list Endpointses.
// All objects returned here must be treated as read-only.
type EndpointsClusterLister interface {
	// List lists all Endpointses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Endpoints, err error)
	EndpointsClusterListerExpansion
}

// endpointsLister implements the EndpointsLister interface.
type endpointsLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// endpointsLister implements the EndpointsClusterLister interface.
type endpointsClusterLister struct {
	indexer cache.Indexer
}

// Cluster scopes the lister to one workspace, allowing users to list and get Endpoints.
func (s *endpointsClusterLister) Cluster(clusterName logicalcluster.Name) EndpointsLister {
	return &endpointsLister{indexer: s.indexer, clusterName: clusterName}
}

// List lists all Endpointses in the indexer.
func (s *endpointsLister) List(selector labels.Selector) (ret []*v1.Endpoints, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*v1.Endpoints))
	})
	return ret, err
}

// List lists all Endpointses in the indexer.
func (s *endpointsClusterLister) List(selector labels.Selector) (ret []*v1.Endpoints, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Endpoints))
	})
	return ret, err
}

// NewEndpointsClusterLister returns a new EndpointsClusterLister.
func NewEndpointsClusterLister(indexer cache.Indexer) EndpointsClusterLister {
	return &endpointsClusterLister{
		indexer: indexer,
	}
}

// Endpointses returns an object that can list and get Endpointses.
func (s *endpointsLister) Endpointses(namespace string) EndpointsNamespaceLister {
	return endpointsNamespaceLister{
		indexer:     s.indexer,
		clusterName: s.clusterName,
		namespace:   namespace,
	}
}

// EndpointsNamespaceLister helps list and get Endpointses.
// All objects returned here must be treated as read-only.
type EndpointsNamespaceLister interface {
	// List lists all Endpointses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Endpoints, err error)
	// Get retrieves the Endpoints from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Endpoints, error)
	EndpointsNamespaceListerExpansion
}

// endpointsNamespaceLister implements the EndpointsNamespaceLister
// interface.
type endpointsNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// Get retrieves the Endpoints from the index for a given name.
func (s endpointsNamespaceLister) Get(name string) (*v1.Endpoints, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("endpoints"), name)
	}
	return obj.(*v1.Endpoints), nil
}

// Get retrieves the Endpoints from the index for a given name.
func (s endpointsNamespaceLister) List(selector labels.Selector) (ret []*v1.Endpoints, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*v1.Endpoints))
	})
	return ret, err
}
