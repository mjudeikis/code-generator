/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"
	v1alpha1 "k8s.io/api/rbac/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterRoleLister helps list ClusterRoles.
// All objects returned here must be treated as read-only.
type ClusterRoleLister interface {
	// List lists all ClusterRoles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterRole, err error)
	// Get retrieves the ClusterRole from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterRole, error)
	ClusterRoleListerExpansion
}

// ClusterRoleClusterLister helps list ClusterRoles.
// All objects returned here must be treated as read-only.
type ClusterRoleClusterLister interface {
	// List lists all ClusterRoles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterRole, err error)
	ClusterRoleClusterListerExpansion
}

// clusterRoleLister implements the ClusterRoleLister interface.
type clusterRoleLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// clusterRoleLister implements the ClusterRoleClusterLister interface.
type clusterRoleClusterLister struct {
	indexer cache.Indexer
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterRole.
func (s *clusterRoleClusterLister) Cluster(clusterName logicalcluster.Name) ClusterRoleLister {
	return &clusterRoleLister{indexer: s.indexer, clusterName: clusterName}
}

// List lists all ClusterRoles in the indexer.
func (s *clusterRoleLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterRole, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*v1alpha1.ClusterRole))
	})
	return ret, err
}

// List lists all ClusterRoles in the indexer.
func (s *clusterRoleClusterLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterRole, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterRole))
	})
	return ret, err
}

// NewClusterRoleClusterLister returns a new ClusterRoleClusterLister.
func NewClusterRoleClusterLister(indexer cache.Indexer) ClusterRoleClusterLister {
	return &clusterRoleClusterLister{
		indexer: indexer,
	}
}

// Get retrieves the ClusterRole from the index for a given name.
func (s clusterRoleLister) Get(name string) (*v1alpha1.ClusterRole, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterrole"), name)
	}
	return obj.(*v1alpha1.ClusterRole), nil
}
