/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/api/certificates/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateSigningRequestLister helps list CertificateSigningRequests.
// All objects returned here must be treated as read-only.
type CertificateSigningRequestLister interface {
	// List lists all CertificateSigningRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CertificateSigningRequest, err error)
	// Get retrieves the CertificateSigningRequest from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.CertificateSigningRequest, error)
	CertificateSigningRequestListerExpansion
}

// CertificateSigningRequestClusterLister helps list CertificateSigningRequests.
// All objects returned here must be treated as read-only.
type CertificateSigningRequestClusterLister interface {
	// List lists all CertificateSigningRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CertificateSigningRequest, err error)
	CertificateSigningRequestClusterListerExpansion
}

// certificateSigningRequestLister implements the CertificateSigningRequestLister interface.
type certificateSigningRequestLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// certificateSigningRequestLister implements the CertificateSigningRequestClusterLister interface.
type certificateSigningRequestClusterLister struct {
	indexer cache.Indexer
}

// Cluster scopes the lister to one workspace, allowing users to list and get CertificateSigningRequest.
func (s *certificateSigningRequestClusterLister) Cluster(clusterName logicalcluster.Name) CertificateSigningRequestLister {
	return &certificateSigningRequestLister{indexer: s.indexer, clusterName: clusterName}
}

// List lists all CertificateSigningRequests in the indexer.
func (s *certificateSigningRequestLister) List(selector labels.Selector) (ret []*v1.CertificateSigningRequest, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*v1.CertificateSigningRequest))
	})
	return ret, err
}

// List lists all CertificateSigningRequests in the indexer.
func (s *certificateSigningRequestClusterLister) List(selector labels.Selector) (ret []*v1.CertificateSigningRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CertificateSigningRequest))
	})
	return ret, err
}

// NewCertificateSigningRequestClusterLister returns a new CertificateSigningRequestClusterLister.
func NewCertificateSigningRequestClusterLister(indexer cache.Indexer) CertificateSigningRequestClusterLister {
	return &certificateSigningRequestClusterLister{
		indexer: indexer,
	}
}

// Get retrieves the CertificateSigningRequest from the index for a given name.
func (s certificateSigningRequestLister) Get(name string) (*v1.CertificateSigningRequest, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("certificatesigningrequest"), name)
	}
	return obj.(*v1.CertificateSigningRequest), nil
}
