/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"
	v1beta1 "k8s.io/api/networking/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceCIDRLister helps list ServiceCIDRs.
// All objects returned here must be treated as read-only.
type ServiceCIDRLister interface {
	// List lists all ServiceCIDRs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ServiceCIDR, err error)
	// Get retrieves the ServiceCIDR from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ServiceCIDR, error)
	ServiceCIDRListerExpansion
}

// ServiceCIDRClusterLister helps list ServiceCIDRs.
// All objects returned here must be treated as read-only.
type ServiceCIDRClusterLister interface {
	// List lists all ServiceCIDRs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ServiceCIDR, err error)
	ServiceCIDRClusterListerExpansion
}

// serviceCIDRLister implements the ServiceCIDRLister interface.
type serviceCIDRLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// serviceCIDRLister implements the ServiceCIDRClusterLister interface.
type serviceCIDRClusterLister struct {
	indexer cache.Indexer
}

// Cluster scopes the lister to one workspace, allowing users to list and get ServiceCIDR.
func (s *serviceCIDRClusterLister) Cluster(clusterName logicalcluster.Name) ServiceCIDRLister {
	return &serviceCIDRLister{indexer: s.indexer, clusterName: clusterName}
}

// List lists all ServiceCIDRs in the indexer.
func (s *serviceCIDRLister) List(selector labels.Selector) (ret []*v1beta1.ServiceCIDR, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*v1beta1.ServiceCIDR))
	})
	return ret, err
}

// List lists all ServiceCIDRs in the indexer.
func (s *serviceCIDRClusterLister) List(selector labels.Selector) (ret []*v1beta1.ServiceCIDR, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ServiceCIDR))
	})
	return ret, err
}

// NewServiceCIDRClusterLister returns a new ServiceCIDRClusterLister.
func NewServiceCIDRClusterLister(indexer cache.Indexer) ServiceCIDRClusterLister {
	return &serviceCIDRClusterLister{
		indexer: indexer,
	}
}

// Get retrieves the ServiceCIDR from the index for a given name.
func (s serviceCIDRLister) Get(name string) (*v1beta1.ServiceCIDR, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("servicecidr"), name)
	}
	return obj.(*v1beta1.ServiceCIDR), nil
}
